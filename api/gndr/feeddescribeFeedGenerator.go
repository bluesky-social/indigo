// Code generated by cmd/lexgen (see Makefile's lexgen); DO NOT EDIT.

package gndr

// schema: gndr.app.feed.describeFeedGenerator

import (
	"context"

	"github.com/gander-social/gander-indigo-sovereign/lex/util"
)

// FeedDescribeFeedGenerator_Feed is a "feed" in the gndr.app.feed.describeFeedGenerator schema.
type FeedDescribeFeedGenerator_Feed struct {
	Uri string `json:"uri" cborgen:"uri"`
}

// FeedDescribeFeedGenerator_Links is a "links" in the gndr.app.feed.describeFeedGenerator schema.
type FeedDescribeFeedGenerator_Links struct {
	PrivacyPolicy  *string `json:"privacyPolicy,omitempty" cborgen:"privacyPolicy,omitempty"`
	TermsOfService *string `json:"termsOfService,omitempty" cborgen:"termsOfService,omitempty"`
}

// FeedDescribeFeedGenerator_Output is the output of a gndr.app.feed.describeFeedGenerator call.
type FeedDescribeFeedGenerator_Output struct {
	Did   string                            `json:"did" cborgen:"did"`
	Feeds []*FeedDescribeFeedGenerator_Feed `json:"feeds" cborgen:"feeds"`
	Links *FeedDescribeFeedGenerator_Links  `json:"links,omitempty" cborgen:"links,omitempty"`
}

// FeedDescribeFeedGenerator calls the XRPC method "gndr.app.feed.describeFeedGenerator".
func FeedDescribeFeedGenerator(ctx context.Context, c util.LexClient) (*FeedDescribeFeedGenerator_Output, error) {
	var out FeedDescribeFeedGenerator_Output
	if err := c.LexDo(ctx, util.Query, "", "gndr.app.feed.describeFeedGenerator", nil, nil, &out); err != nil {
		return nil, err
	}

	return &out, nil
}
