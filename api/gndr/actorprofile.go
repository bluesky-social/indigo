// Code generated by cmd/lexgen (see Makefile's lexgen); DO NOT EDIT.

package gndr

// schema: gndr.app.actor.profile

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"

	comatprototypes "github.com/gander-social/gander-indigo-sovereign/api/atproto"
	"github.com/gander-social/gander-indigo-sovereign/lex/util"
	cbg "github.com/whyrusleeping/cbor-gen"
)

func init() {
	util.RegisterType("gndr.app.actor.profile", &ActorProfile{})
} //
// RECORDTYPE: ActorProfile
type ActorProfile struct {
	LexiconTypeID string `json:"$type,const=gndr.app.actor.profile" cborgen:"$type,const=gndr.app.actor.profile"`
	// avatar: Small image to be displayed next to posts from account. AKA, 'profile picture'
	Avatar *util.LexBlob `json:"avatar,omitempty" cborgen:"avatar,omitempty"`
	// banner: Larger horizontal image to display behind profile view.
	Banner    *util.LexBlob `json:"banner,omitempty" cborgen:"banner,omitempty"`
	CreatedAt *string       `json:"createdAt,omitempty" cborgen:"createdAt,omitempty"`
	// description: Free-form profile description text.
	Description          *string                        `json:"description,omitempty" cborgen:"description,omitempty"`
	DisplayName          *string                        `json:"displayName,omitempty" cborgen:"displayName,omitempty"`
	JoinedViaStarterPack *comatprototypes.RepoStrongRef `json:"joinedViaStarterPack,omitempty" cborgen:"joinedViaStarterPack,omitempty"`
	// labels: Self-label values, specific to the Gander application, on the overall account.
	Labels     *ActorProfile_Labels           `json:"labels,omitempty" cborgen:"labels,omitempty"`
	PinnedPost *comatprototypes.RepoStrongRef `json:"pinnedPost,omitempty" cborgen:"pinnedPost,omitempty"`
}

// Self-label values, specific to the Gander application, on the overall account.
type ActorProfile_Labels struct {
	LabelDefs_SelfLabels *comatprototypes.LabelDefs_SelfLabels
}

func (t *ActorProfile_Labels) MarshalJSON() ([]byte, error) {
	if t.LabelDefs_SelfLabels != nil {
		t.LabelDefs_SelfLabels.LexiconTypeID = "com.atproto.label.defs#selfLabels"
		return json.Marshal(t.LabelDefs_SelfLabels)
	}
	return nil, fmt.Errorf("cannot marshal empty enum")
}
func (t *ActorProfile_Labels) UnmarshalJSON(b []byte) error {
	typ, err := util.TypeExtract(b)
	if err != nil {
		return err
	}

	switch typ {
	case "com.atproto.label.defs#selfLabels":
		t.LabelDefs_SelfLabels = new(comatprototypes.LabelDefs_SelfLabels)
		return json.Unmarshal(b, t.LabelDefs_SelfLabels)

	default:
		return nil
	}
}

func (t *ActorProfile_Labels) MarshalCBOR(w io.Writer) error {

	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if t.LabelDefs_SelfLabels != nil {
		return t.LabelDefs_SelfLabels.MarshalCBOR(w)
	}
	return fmt.Errorf("cannot cbor marshal empty enum")
}
func (t *ActorProfile_Labels) UnmarshalCBOR(r io.Reader) error {
	typ, b, err := util.CborTypeExtractReader(r)
	if err != nil {
		return err
	}

	switch typ {
	case "com.atproto.label.defs#selfLabels":
		t.LabelDefs_SelfLabels = new(comatprototypes.LabelDefs_SelfLabels)
		return t.LabelDefs_SelfLabels.UnmarshalCBOR(bytes.NewReader(b))

	default:
		return nil
	}
}
